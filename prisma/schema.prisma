// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          Int     @id @default(autoincrement())
  username    String  @unique
  email       String  @unique
  avatar      String?
  password    String
  address     String?
  phonenumber String  @unique
  refToken    String?

  // 외부 테이블 참조
  boughtBreads Bread[]
  myCarts      Cart[]
  // 사장님 관련
  ownBakery    Bakery?
  ownBreads    Bread[]  @relation("ownBreads")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Bread {
  id                Int      @id @default(autoincrement())
  name              String
  price             Int
  bakery            Bakery?  @relation("bakeryToBread", fields: [bakeryId], references: [id])
  bakeryId          Int?
  description       String?
  detailDescription String?
  owner             User     @relation("ownBreads", fields: [ownerId], references: [id])
  ownerId           Int
  boughtUsers       User[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  // 시그니처 메뉴인지
  isSigniture       Boolean  @default(false)
  carts             Cart[]
}

model Bakery {
  id                Int      @id @default(autoincrement())
  owner             User     @relation(fields: [ownerId], references: [id])
  ownerId           Int
  name              String   @unique
  address           String?
  description       String?
  detailDescription String?
  breads            Bread[]  @relation("bakeryToBread")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  carts             Cart[]
}

model Cart {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  bakery    Bakery   @relation(fields: [bakeryId], references: [id])
  bakeryId  Int
  breads    Bread[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 나중에 Cart에 상품 추가할 때 CreateOrUpdate 해서
// 해당 bakeryId값 가진 Cart가 없으면 Cart 새로 만들고
// 있으면 해당 Cart에 Bread 추가 ! 굿
