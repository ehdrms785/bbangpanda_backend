// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          Int     @id @default(autoincrement())
  username    String  @unique
  email       String  @unique
  avatar      String?
  password    String
  address     String?
  phonenumber String  @unique
  refToken    String?

  // 외부 테이블 참조
  // 사장님 관련
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  boughtBreads Bread[]
  ownBakery    Bakery?     @relation("ownBakery")
  dibsBakeries Bakery[]    @relation("Users_dibsBakery")
  dibsBreads   Bread[]     @relation("Users_dibsBread")
  cartBreads   CartBread[]
  orderList    OrderList[]
}

model Bread {
  id                   Int                 @id @default(autoincrement())
  name                 String
  price                Int
  discount             Int                 @default(0)
  description          String?
  detailDescription    String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  // 시그니처 메뉴인지
  isSigniture          Boolean             @default(false)
  bakery               Bakery?             @relation("bakeryToBread", fields: [bakeryId], references: [id])
  bakeryId             Int?
  boughtUsers          User[]
  dibedUsers           User[]              @relation("Users_dibsBread")
  cartBreads           CartBread[]
  orders               Order[]
  breadFeatures        BreadFeatures[]
  breadLargeCategory   BreadLargeCategory? @relation(fields: [breadLargeCategoryId], references: [id])
  breadLargeCategoryId String?
  breadSmallCategory   BreadSmallCategory? @relation(fields: [breadSmallCategoryId], references: [id])
  breadSmallCategoryId String?
}

model Bakery {
  id                Int             @id @default(autoincrement())
  name              String          @unique
  address           String?
  description       String?
  detailDescription String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  owner             User?           @relation("ownBakery", fields: [ownerId], references: [id])
  ownerId           Int?
  breads            Bread[]         @relation("bakeryToBread")
  dibedUsers        User[]          @relation("Users_dibsBakery")
  bakeryFeatures    BakeryFeature[]
}

model CartBread {
  id        Int      @id @default(autoincrement())
  quantity  Int      @default(1)
  bakeryId  Int
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  bread     Bread?   @relation(fields: [breadId], references: [id])
  breadId   Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  orderNumber    Int        @id
  payAmount      Int
  discountAmount Int        @default(0)
  shippingFee    Int
  orderStatus    String     @default("주문접수")
  breads         Bread[]
  createdAt      DateTime   @default(now())
  OrderList      OrderList? @relation(fields: [orderListId], references: [id])
  orderListId    Int?
  // 결제수단
  // pg관련 컬럼 추가 해야함
  // 결제 은행 정보
  // 결제 시간
  // 승인 시간
  // 승인 여부
  // 요청사항
  //
}

model OrderList {
  id        Int     @id @default(autoincrement())
  user      User?   @relation(fields: [userId], references: [id])
  userId    Int?
  orderList Order[]
}

model BakeryFeature {
  id       String   @id
  filter   String
  bakeries Bakery[]
}

model BreadFeatures {
  id     String  @id
  filter String
  breads Bread[]
}

model BreadLargeCategory {
  id                 String               @id
  category           String
  breads             Bread[]
  breadSmallCategory BreadSmallCategory[]
}

model BreadSmallCategory {
  id              String             @id
  largeCategory   BreadLargeCategory @relation(fields: [largeCategoryId], references: [id])
  largeCategoryId String
  category        String
  breads          Bread[]
}
